" Path to Python executables
let g:python_host_prog='{{ neovim_py2_env | expanduser }}/bin/python'
let g:python3_host_prog='{{ neovim_py3_env | expanduser }}/bin/python'

set termguicolors   " Enable true color support.
set background=dark " Enable dark background.
set number          " Show line numbers.
set expandtab       " Insert spaces whenever the tab key is pressed.
set smartindent     " Use smart indentation.
set shiftwidth=4    " Set number of spaces for automatic indentation.
set tabstop=4       " Set number of spaces for tabs.
set textwidth=79    " Set text width.
set colorcolumn=80  " Mark lines longer than 80 columns.

" Show tabs.
set list
set listchars=tab:>.,trail:_,extends:>,precedes:<

augroup makefiles
  " Makefiles require tabs.
  autocmd FileType cmake,make setlocal noexpandtab
augroup END

augroup webdevelopment
  autocmd FileType html,javascript,typescript setlocal shiftwidth=2 tabstop=2
augroup END

" Manage plugins.
call plug#begin('{{ neovim_plugin_directory }}')
{% for plugin in neovim_plugins %}
Plug '{{ plugin }}'
{% endfor %}
call plug#end()

" Enable the gruvbox color scheme.
let g:gruvbox_italics=1
colorscheme gruvbox

" The color scheme supports powerline symbols.
let g:airline_powerline_fonts=1

" Enable completion for all buffers.
autocmd BufEnter * call ncm2#enable_for_buffer()
set completeopt=noinsert,menuone,noselect

" Language server: c/c++
if executable('clangd')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'clangd',
    \ 'cmd': {server_info->['clangd']},
    \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
    \ })
endif

" Language server: python
if executable('pyls')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'pyls',
    \ 'cmd': {server_info->['pyls']},
    \ 'whitelist': ['python'],
    \ })
endif

" Language server: javascript
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'javascript support using typescript-language-server',
    \ 'cmd': {
        \ server_info->[
            \ &shell, &shellcmdflag, 'typescript-language-server --stdio'
            \ ]
        \ },
    \ 'root_uri': {
        \ server_info->lsp#utils#path_to_uri(
            \ lsp#utils#find_nearest_parent_file_directory(
                \ lsp#utils#get_buffer_path(), 'package.json'))
        \ },
    \ 'whitelist': ['javascript', 'javascript.jsx'],
    \ })
endif

" Languare server: typescript
if executable('typescript-language-server')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'typescript support using typescript-language-server',
    \ 'cmd': {
        \ server_info->[
            \ &shell, &shellcmdflag, 'typescript-language-server --stdio'
            \ ]
        \ },
    \ 'root_uri': {
        \ server_info->lsp#utils#path_to_uri(
            \ lsp#utils#find_nearest_parent_file_directory(
                \ lsp#utils#get_buffer_path(), 'tsconfig.json'))
        \ },
    \ 'whitelist': ['typescript', 'typescript.tsx'],
    \ })
endif

let g:vimtex_flavor='latex'

" Workaround for the missing `--remote` option.
let g:vimtex_compiler_progname='nvr'

" PDF viewer
{% if neovim_vimtex_view_method is defined %}
{% if neovim_vimtex_view_method == "Preview" %}
let g:vimtex_view_method='general'
let g:vimtex_view_general_viewer='open'
let g:vimtex_view_general_options='-a Preview'
{% else %}
let g:vimtex_view_method='{{ neovim_vimtex_view_method }}'
{% endif %}
{% endif %}

" Disable some ALE linters.
let g:ale_linters = {
  \ 'cpp': ['clangd'],
  \ }
